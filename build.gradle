
apply plugin: 'java'

repositories {
    mavenCentral()
}

configurations {
    jarjar
}

dependencies {
    // functional APIs
    compile group: 'com.google.guava', name: 'guava', version: 'r08'
    compile group: 'org.functionaljava', name: 'functionaljava', version: '3.0'

    // internals
    compile group: 'cglib', name: 'cglib-nodep', version: '2.2'
    compile group: 'org.objenesis', name: 'objenesis', version: '1.2'
    compile group: 'org.javassist', name: 'javassist', version: '3.14.0-GA'

    // test
    testCompile group: 'junit', name: 'junit', version: '4.10'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.8.5'
    
    // packaging    
    jarjar group: 'com.googlecode.jarjar', name: 'jarjar', version: '1.1'    
}

// version
def propFile = new File('resources/Funcito.properties')
assert propFile.exists()
def properties = new Properties()
properties.load(new FileReader(propFile))
version = properties.getProperty('funcito.version')

println "***** Funcito v ${version}"

// sourceSets
sourceSets.main.java.srcDirs 'src', 'examples'
sourceSets.main.resources.srcDir 'resources'
sourceSets.test.java.srcDirs 'test'

// build src jar
task srcJar(type: Jar) {
    baseName = "${project.name}-src"

    from(sourceSets.main.java.srcDirs) {
        include '**/*.java'
    }

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.properties'
    }
    
    from('docs') {
        include 'ReadMe.txt'
        include 'License.txt'
    }
}

task binaryJar << {
    def targetDir = "build/libs"
    def targetJar = targetDir + "/${project.name}-${version}.jar"
    def classesDir = "build/classes/main"
    
    ant.mkdir(dir : targetDir)
    
    // define jarjar
    ant.taskdef(name: 'jarjar', classname: 'com.tonicsystems.jarjar.JarJarTask', classpath: configurations.jarjar.asPath)

    // use jarjar to build jar and obfuscate org.objenesis
    ant.jarjar(jarfile : targetJar) {
        ant.fileset(dir : classesDir)
        ant.fileset(dir : 'docs') {
            include(name : 'ReadMe.txt')
            include(name : 'License.txt')
        }
        
        configurations.compile.findAll {
            if (it.name =~ /objenesis/) { 
                zipfileset(src : "${it.path}") 
            }
        } 
        ant.rule(pattern : 'org.objenesis.**', result : 'org.funcito.thirdparty.objenesis.@1')
    }
}

srcJar.dependsOn(test)
binaryJar.dependsOn(test)

// build binary jar
task jar(overwrite : true) <<  {
    // no-op
}

jar.dependsOn(srcJar)
jar.dependsOn(binaryJar)


