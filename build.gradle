
apply plugin: 'java'

repositories {
    mavenCentral()
}

configurations {
    jarjar
}

dependencies {
    // functional APIs
    compile group: 'com.google.guava', name: 'guava', version: 'r08'
    compile group: 'org.functionaljava', name: 'functionaljava', version: '3.0'

    // internals
    compile group: 'cglib', name: 'cglib-nodep', version: '2.2'
    compile group: 'org.objenesis', name: 'objenesis', version: '1.2'
    compile group: 'org.javassist', name: 'javassist', version: '3.14.0-GA'

    // test
    testCompile group: 'junit', name: 'junit', version: '4.10'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.8.5'
    
    testRuntime group: 'net.sourceforge.cobertura', name: 'cobertura', version: '1.9.4.1'
    
    // packaging    
    jarjar group: 'com.googlecode.jarjar', name: 'jarjar', version: '1.1'    
}

final String PROP_FILE = "Funcito.properties"
final String BUILD_INFO_FILE = "buildInfo.txt"

// version
def propFile = new File("resources/${PROP_FILE}")
assert propFile.exists()
def properties = new Properties()
properties.load(new FileReader(propFile))
version = properties.getProperty('funcito.version')

println "***** Funcito v ${version}"

// sourceSets
sourceSets.main.java.srcDirs 'src', 'examples'
sourceSets.main.resources.srcDir 'resources'
sourceSets.test.java.srcDirs 'test'

// create build info file
task buildInfo() {
   def buildInfoFile = "resources/${BUILD_INFO_FILE}"
   ant.delete(file: buildInfoFile)
   def vars = ["BUILD_NUMBER", "BUILD_ID", "JOB_NAME", "BUILD_TAG",
               "EXECUTOR_NUMBER", "NODE_NAME", "NODE_LABELS", 
               "JAVA_HOME", "WORKSPACE", "HUDSON_URL", "JOB_URL",
               "SVN_REVISION", "CVS_BRANCH"]

   new File(buildInfoFile).withWriter { writer ->
       def map = System.getenv();
       map.each { key, value ->
           if (vars.contains(key)) { 
               writer.write("${key} = ${value}") 
           }
       }
   }
}

// build src jar
task srcJar(type: Jar, dependsOn: [buildInfo,test]) {
    baseName = "${project.name}-src"

    from(sourceSets.main.java.srcDirs) {
        include '**/*.java'
    }

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.properties'
        include '**/*.txt'
    }
    
    from('docs') {
        include 'ReadMe.txt'
        include 'License.txt'
    }
}

task binaryJar(dependsOn: test) << {
    def targetDir = "build/libs"
    def targetJar = targetDir + "/${project.name}-${version}.jar"
    def classesDir = "build/classes/main"
    
    ant.mkdir(dir: targetDir)
    
    // define jarjar
    ant.taskdef(name: 'jarjar', classname: 'com.tonicsystems.jarjar.JarJarTask', classpath: configurations.jarjar.asPath)

    // use jarjar to build jar and obfuscate org.objenesis
    ant.jarjar(jarfile: targetJar) {
        ant.fileset(dir: classesDir)

        ant.fileset(dir: 'resources') {
            include(name: PROP_FILE)
            include(name: BUILD_INFO_FILE) 
        }
        ant.fileset(dir: 'docs') {
            include(name: 'ReadMe.txt')
            include(name: 'License.txt')
        }
        
        configurations.compile.findAll {
            if (it.name =~ /objenesis/) { 
                zipfileset(src: "${it.path}") 
            }
        } 
        ant.rule(pattern: 'org.objenesis.**', result: 'org.funcito.thirdparty.objenesis.@1')
    }
}

// build binary jar
task jar(overwrite: true, dependsOn: [srcJar,binaryJar] ) << {
    // no-op
}

// define Cobertura task
ant.taskdef(resource:'tasks.properties') {
    classpath {
        pathelement(path: configurations.testRuntime.asPath)
    }
}

def classesDir = "${project.buildDir}/classes/main"
def origClassesDir = "${project.buildDir}/classes-orig/main"
def coverageDir = "${project.buildDir}/reports/coverage"
def serFile = "cobertura.ser"

test.doFirst { task ->
    ant.delete(file: serFile)
    ant.delete(dir: coverageDir)
    ant.delete(dir: origClassesDir)   
    ant.mkdir(dir: origClassesDir)
        
    ant.copy(todir: origClassesDir) {
        fileset(dir: classesDir)
    }
    
    // define Cobertura task
    ant.taskdef(resource: 'tasks.properties') {
        classpath {
            pathelement(path: configurations.testRuntime.asPath)
        }
    }
    
    // instrument the classes
    ant.'cobertura-instrument' {
        // only instrument the relevant classes
        fileset(dir: classesDir,
                includes: "org/funcito/**/*.class",
                excludes: "org/funcito/thirdparty/**/*.class")
    }        
}
 
test.doLast {
    ant.'cobertura-report'(destdir: coverageDir,
                           format: 'html') {
        fileset(dir: new File('src') ) 
    }

    ant.delete(file: serFile)    
    ant.delete(dir: classesDir)   
    ant.mkdir(dir: classesDir)
        
    ant.copy(todir: classesDir) {
        fileset(dir: origClassesDir)
    } 
}



