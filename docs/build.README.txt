
Prerequisites:

- Java 1.5 or higher and set JAVA_HOME
- Gradle 1.6
- Technically even Gradle is not needed if you use the gradlew script (gradlew.bat for Windows) which will
retrieve and use the appropriate version of Gradle.

If you choose not to use the included gradlew script, you need to download and install above indicated version of Gradle
(available at: http://www.gradle.org/) and do the following:

- set environment variable GRADLE_HOME to root directory of Gradle installation
- add GRADLE_HOME/bin to the PATH environment variable
- set perms on GRADLE_HOME/bin/*
- add GRADLE_HOME/lib to CLASSPATH environment variable



Commands:
(NOTE: anywhere that it says "gradle" below, you can substitute "gradlew" to use the Gradle Wrapper script instead)

gradle tasks
    - task similar to Ant target
    - this is analogous to ant -p
gradle compileJava 
    - builds src
    - writes classes to 'build/classes/main' dir
gradle compileTestJava 
    - builds test
    - writes classes to 'build/classes/test' dir
gradle test 
    - runs tests, writes reports to 'build/reports' dir
gradle jar
    - uses build/classes/main to create build/lib/funcito.jar
gradle uploadArchives
    - signs artifacts, and uploads to Sonatype OSSRH staging area (requires PGP secret keyring)

Release Notes:
For non-Maven distribution, use jars in build/libs (verify main jar has .../thirdparty/ dir of classes)
For Maven distribution:
-- see following for hints:
  > http://theholyjava.wordpress.com/2010/02/07/releasing-a-project-to-maven-centr/  (mvn - centric)
  > https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide
Highlights from above links
-- call "gradle uploadArchives" (or gradlew) (signs and stages in Sonatype OSS)
  > above requires signing info in personal user-dir\.gradle\gradle.properties
  > gradle.properties above points to secret signing info file on your hard disk (created using GPG)
-- log into Sonatype OSS (http://oss.sonatype.org)
-- go to Staging Repositories, filter by "com.googlecode.funcito" (filter was in upper right)
-- select appropriate Funcito element (likely only one at any given time)
-- navigate tree and download/verify each jar is OK
-- s/b button bar at top (same row as filter): perform "close" to mark staging area as complete (can be undone later)
-- on same button bar: perform "release"
-- wait a while (hours, or up to a day)